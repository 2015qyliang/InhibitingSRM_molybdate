legend.key = element_blank())
pdf(width = 8, height = 2.5, file = '06-cohesion+cor.pdf' )
grid.newpage()
pushViewport(viewport(layout = grid.layout(1, 5)))
vplayout <- function(x,y){viewport(layout.pos.row = x, layout.pos.col = y)}
print(p, vp = vplayout(1,1:3))
print(pc, vp = vplayout(1,4))
print(pm, vp = vplayout(1,5))
dev.off()
ggsave('06-cor_complex_stability.pdf',
grid.arrange(p, pc, pm, nrow = 1),
units = 'in', width = 8, height = 2.5)
library(gridExtra)
ggsave('06-cor_complex_stability.pdf',
grid.arrange(p, pc, pm, nrow = 1),
units = 'in', width = 8, height = 2.5)
pdf(width = 8, height = 2.5, file = '06-cohesion+cor.pdf' )
grid.newpage()
pushViewport(viewport(layout = grid.layout(1, 10)))
vplayout <- function(x,y){viewport(layout.pos.row = x, layout.pos.col = y)}
print(p, vp = vplayout(1,1:4))
print(pc, vp = vplayout(1,5:7))
print(pm, vp = vplayout(1,8:10))
dev.off()
# set the layout of result
pdf(width = 8, height = 2.5, file = '06-cohesion+cor.pdf' )
grid.newpage()
pushViewport(viewport(layout = grid.layout(1, 10)))
vplayout <- function(x,y){viewport(layout.pos.row = x, layout.pos.col = y)}
print(p, vp = vplayout(1,1:4))
print(pc, vp = vplayout(1,5:7))
print(pm, vp = vplayout(1,8:10))
dev.off()
pdf(width = 8, height = 2.5, file = '06-cohesion+cor.pdf' )
grid.newpage()
pushViewport(viewport(layout = grid.layout(1, 4)))
vplayout <- function(x,y){viewport(layout.pos.row = x, layout.pos.col = y)}
print(p, vp = vplayout(1,1:2))
print(pc, vp = vplayout(1,3))
print(pm, vp = vplayout(1,4))
dev.off()
pdf(width = 8, height = 2.5, file = '06-cohesion+cor.pdf' )
grid.newpage()
pushViewport(viewport(layout = grid.layout(1, 11)))
vplayout <- function(x,y){viewport(layout.pos.row = x, layout.pos.col = y)}
print(p, vp = vplayout(1,1:5))
print(pc, vp = vplayout(1,6:8))
print(pm, vp = vplayout(1,9:11))
dev.off()
# coding: utf-8
# email: qfsfdxlqy@163.com
# Github: https://github.com/2015qyliang
library(tidyverse)
library(reshape2)
library(ggplot2)
library(grid)
library(gridExtra)
library(doBy)
#####################################################
fnscoh = list.files(pattern = '03-cohesion_')
values.cohesion = Group = Type = c()
for (fn in fnscoh) {
gp = substr(fn, 13, 16)
dfCoh = readRDS(fn)
pos.cohes = dfCoh$`Positive Connectedness`
neg.cohes = dfCoh$`Negative Connectedness`
values.cohesion = append(values.cohesion, c(pos.cohes, neg.cohes))
Type = append(Type, c(rep('Positive', length(pos.cohes)),
rep('Negative', length(neg.cohes))))
Group = append(Group, rep(gp, length(c(pos.cohes, neg.cohes))))
}
DFcohesion = data.frame(Group, Type, values.cohesion)
DFcohesion$GP = substr(DFcohesion$Group, 4, 4)
DFcohesion$Time = as.integer(substr(DFcohesion$Group, 2, 3))
DFcohesion.m = DFcohesion[DFcohesion$Group == 'D00C', ]
DFcohesion.m$Group = 'D00M'
DFcohesion.m$GP = 'M'
DFcohesion = rbind(DFcohesion, DFcohesion.m)
DFcohesion = DFcohesion[, c('Group', 'values.cohesion', 'Type')]
sumDF = summaryBy(values.cohesion~Group+Type, data = DFcohesion, FUN = mean)
sumDF = sumDF[!(sumDF$Group == 'D00M'), ]
sumDF.r = dcast(data = sumDF, Type ~ Group, value.var = 'values.cohesion.mean')
sumDF.r = sumDF.r[, 3:ncol(sumDF.r)]
#####################################################
rawdf = read.table('04-complexity+stability.txt', header = T, sep = '\t',
stringsAsFactors = F, row.names = 1)
rawdf = rbind(rawdf, sumDF.r)
rownames(rawdf)[12:13] = c('negative.c', 'positive.c')
rawdf.c = t(rawdf[, str_detect(colnames(rawdf), 'C')])
rawdf.m = t(rawdf[, str_detect(colnames(rawdf), 'M')])
cc = cor(rawdf.c)
cm = cor(rawdf.m)
cc = as.data.frame(cc[1:11, 12:13])
cm = as.data.frame(cm[1:11, 12:13])
cc$complex = rownames(cc)
cm$complex = rownames(cm)
cc.r = melt(cc, variable.name = "Stability", measure.name = colnames(cc)[1:2],
value.name ="cor")
cc.r$cor = round(cc.r$cor, 2)
cm.r = melt(cm, variable.name = "Stability", measure.name = colnames(cm)[1:2],
value.name ="cor")
cm.r$cor = round(cm.r$cor, 2)
cc.r$complex = factor(cc.r$complex, levels = rev(rownames(cc)))
cm.r$complex = factor(cm.r$complex, levels = rev(rownames(cm)))
cc.r$text = cc.r$cor
cc.r$text[abs(cc.r$text) < 0.7] = NA
pc = ggplot(cc.r, aes(Stability, complex, fill = cor))+
geom_raster(color = "white")+
scale_fill_gradient2(low = "#2166ac", mid = "#f7f7f7", high = "#b2182b",
midpoint = 0, limit = c(-1,1), space = "Lab") +
geom_text(aes(Stability, complex, label = text), color = "black", size = 2) +
theme( panel.background = element_blank(),
panel.grid = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_text(size = 8, angle = 30, hjust = 1, vjust = 1, color = 'black'),
axis.text.y = element_text(size = 8, hjust = 1, vjust = 0.5, color = 'black'),
legend.key.width = unit(.07, 'in'),
legend.key.height = unit(.2, 'in'),
legend.position = "right",
legend.background = element_blank(),
legend.key = element_blank())
cm.r$text = cm.r$cor
cm.r$text[abs(cm.r$text) < 0.7] = NA
pm = ggplot(cm.r, aes(Stability, complex, fill = cor))+
geom_raster(color = "white")+
scale_fill_gradient2(low = "#2166ac", mid = "#f7f7f7", high = "#b2182b",
midpoint = 0, limit = c(-1,1), space = "Lab") +
geom_text(aes(Stability, complex, label = text), color = "black", size = 2) +
theme( panel.background = element_blank(),
panel.grid = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_text(size = 8, angle = 30, hjust = 1, vjust = 1, color = 'black'),
axis.text.y = element_text(size = 8, hjust = 1, vjust = 0.5, color = 'black'),
legend.key.width = unit(.07, 'in'),
legend.key.height = unit(.2, 'in'),
legend.position = "right",
legend.background = element_blank(),
legend.key = element_blank())
# ggsave('06-cor_complex_stability.pdf', grid.arrange(pc, pm, nrow = 1),
#        units = 'in', width = 5, height = 2.5)
##################################################################################
##################################################################################
##################################################################################
##################################################################################
fnscoh = list.files(pattern = '03-cohesion_')
values.cohesion = Group = Type = c()
for (fn in fnscoh) {
gp = substr(fn, 13, 16)
dfCoh = readRDS(fn)
pos.cohes = dfCoh$`Positive Connectedness`
neg.cohes = dfCoh$`Negative Connectedness`
values.cohesion = append(values.cohesion, c(pos.cohes, neg.cohes))
Type = append(Type, c(rep('Positive', length(pos.cohes)),
rep('Negative', length(neg.cohes))))
Group = append(Group, rep(gp, length(c(pos.cohes, neg.cohes))))
}
DFcohesion = data.frame(Group, Type, values.cohesion)
DFcohesion$GP = substr(DFcohesion$Group, 4, 4)
DFcohesion$Time = as.integer(substr(DFcohesion$Group, 2, 3))
DFcohesion.m = DFcohesion[DFcohesion$Group == 'D00C', ]
DFcohesion.m$Group = 'D00M'
DFcohesion.m$GP = 'M'
DFcohesion = rbind(DFcohesion, DFcohesion.m)
head(DFcohesion)
##########################################################
p = ggplot(DFcohesion, aes(x = Time, y = values.cohesion, group = GP, color = GP)) +
geom_point(shape = 16,  size = 1, alpha = 0.2) +
geom_smooth(method = "lm", se = F, size = 0.5, alpha = 0.75) +
scale_color_manual(values = c('#E69F00', '#0072B2')) +
facet_wrap(.~Type, ncol = 2, scales = 'free_y') +
labs(x = "", y = "") + theme_bw()+
theme(panel.grid = element_blank(),
# panel.grid = element_line(size = 0.1, color = 'grey90'),
strip.text = element_text(size = 10),
strip.background = element_blank(),
axis.text.y = element_text(size = 8, hjust = 0.5, vjust = 0.5, angle = 90),
axis.text.x = element_text(size = 10, color = 'black'),
legend.position = "none")
# ggsave("06-plot_cohesion.pdf", p, units = "in", height = 2.5, width = 4)
ggsave('06-cor_complex_stability.pdf',
grid.arrange(p, pc, pm, nrow = 1),
units = 'in', width = 8, height = 2.5)
# set the layout of result
pdf(width = 8, height = 2.5, file = '06-cohesion+cor.pdf' )
grid.newpage()
pushViewport(viewport(layout = grid.layout(1, 11)))
vplayout <- function(x,y){viewport(layout.pos.row = x, layout.pos.col = y)}
print(p, vp = vplayout(1,1:5))
print(pc, vp = vplayout(1,6:8))
print(pm, vp = vplayout(1,9:11))
dev.off()
##########################################################
write(c(), '07-cohesion_lmSmooth.txt')
for (gp in unique(DFcohesion$GP)) {
DFcohesion.f = DFcohesion[DFcohesion$GP == gp, ]
for (fac in unique(DFcohesion.f$Type)) {
DFcohesion.lm = DFcohesion.f[DFcohesion.f$Type == fac, ]
res = summary(lm(DFcohesion.lm$values.cohesion ~ DFcohesion.lm$Time))
write('----------------------', '07-cohesion_lmSmooth.txt', append = T)
write(paste0('Group: ', gp), '07-cohesion_lmSmooth.txt', append = T)
write(paste0('Factor: ', fac), '07-cohesion_lmSmooth.txt', append = T)
write(paste0('slope: ', res$coefficients[,'Estimate'][1]), '07-cohesion_lmSmooth.txt', append = T)
write(paste0('r.squared: ', res$r.squared), '07-cohesion_lmSmooth.txt', append = T)
write(paste0('p_value: ', res$coefficients[,'Pr(>|t|)'][2]), '07-cohesion_lmSmooth.txt', append = T)
}
}
library(igraph)
library(omnivor)
library(ggplot2)
mnIndex = function(fn) {
nodes = read.table(paste0('./NetInfo/', fn,' node_attribute.txt'),
header = T, sep = '\t', stringsAsFactors = F)
rownames(nodes) = nodes$id
links = read.table(paste0('./NetInfo/', fn,' edge_attribute.txt'),
header = T, sep = '\t', stringsAsFactors = F)
net.graph = graph_from_data_frame( d = links, vertices = nodes, directed = F)
modu = modularity(net.graph, membership = nodes$No..module)
nest = nestedness(net.graph, transpose = F)
return(c(modu, nest))
}
sampleGroups = read.table('01-RMTvalue.txt', header = T, sep = '\t', stringsAsFactors = F)
Group = values.r = values.e = Type = empir = c()
for (i in 1:length(sampleGroups$groups)) {
gr = sampleGroups$groups[i]
fn = paste0(gr, ' ', sprintf('%0.2f', sampleGroups$value[i]))
M.empir = mnIndex(fn)[1]
N.empir = mnIndex(fn)[2]
simuFn = list.files(pattern = paste0('04-', gr, '-*'))
simuDF = read.table(simuFn, header = T, sep = '\t')
m.mean = mean(simuDF$modularity)
n.mean = mean(simuDF$nestedness)
RM = round((M.empir - m.mean)/m.mean, digits = 4)
RN = round((N.empir - n.mean)/n.mean, digits = 4)
Group = append(Group, rep(gr, 2))
values.r = append(values.r, c(RM, RN))
Type = append(Type, c('RM', 'RN'))
values.e = append(values.e, c(M.empir, N.empir))
empir = append(empir, c('Modularity', 'Nestedness'))
}
library(igraph)
library(omnivor)
library(ggplot2)
mnIndex = function(fn) {
nodes = read.table(paste0('./NetInfo/', fn,' node_attribute.txt'),
header = T, sep = '\t', stringsAsFactors = F)
rownames(nodes) = nodes$id
links = read.table(paste0('./NetInfo/', fn,' edge_attribute.txt'),
header = T, sep = '\t', stringsAsFactors = F)
net.graph = graph_from_data_frame( d = links, vertices = nodes, directed = F)
modu = modularity(net.graph, membership = nodes$No..module)
nest = nestedness(net.graph, transpose = F)
return(c(modu, nest))
}
sampleGroups = read.table('01-RMTvalue.txt', header = T, sep = '\t', stringsAsFactors = F)
Group = values.r = values.e = Type = empir = c()
for (i in 1:length(sampleGroups$groups)) {
gr = sampleGroups$groups[i]
fn = paste0(gr, ' ', sprintf('%0.2f', sampleGroups$value[i]))
M.empir = mnIndex(fn)[1]
N.empir = mnIndex(fn)[2]
simuFn = list.files(pattern = paste0('04-', gr, '-*'))
simuDF = read.table(simuFn, header = T, sep = '\t')
m.mean = mean(simuDF$modularity)
n.mean = mean(simuDF$nestedness)
RM = round((M.empir - m.mean)/m.mean, digits = 4)
RN = round((N.empir - n.mean)/n.mean, digits = 4)
Group = append(Group, rep(gr, 2))
values.r = append(values.r, c(RM, RN))
Type = append(Type, c('RM', 'RN'))
values.e = append(values.e, c(M.empir, N.empir))
empir = append(empir, c('Modularity', 'Nestedness'))
}
i
sampleGroups = read.table('01-RMTvalue.txt', header = T, sep = '\t', stringsAsFactors = F)
Group = values.r = values.e = Type = empir = c()
i
gr = sampleGroups$groups[i]
fn = paste0(gr, ' ', sprintf('%0.2f', sampleGroups$value[i]))
M.empir = mnIndex(fn)[1]
N.empir = mnIndex(fn)[2]
simuFn = list.files(pattern = paste0('04-', gr, '-*'))
simuDF = read.table(simuFn, header = T, sep = '\t')
simuFn = list.files(path = 'RandomSimu', pattern = paste0('04-', gr, '-*'))
simuDF = read.table(file.path('RandomSimu', simuFn), header = T, sep = '\t')
m.mean = mean(simuDF$modularity)
n.mean = mean(simuDF$nestedness)
RM = round((M.empir - m.mean)/m.mean, digits = 4)
RN = round((N.empir - n.mean)/n.mean, digits = 4)
Group = append(Group, rep(gr, 2))
values.r = append(values.r, c(RM, RN))
Type = append(Type, c('RM', 'RN'))
values.e = append(values.e, c(M.empir, N.empir))
empir = append(empir, c('Modularity', 'Nestedness'))
sampleGroups = read.table('01-RMTvalue.txt', header = T, sep = '\t', stringsAsFactors = F)
Group = values.r = values.e = Type = empir = c()
for (i in 1:length(sampleGroups$groups)) {
gr = sampleGroups$groups[i]
fn = paste0(gr, ' ', sprintf('%0.2f', sampleGroups$value[i]))
M.empir = mnIndex(fn)[1]
N.empir = mnIndex(fn)[2]
simuFn = list.files(path = 'RandomSimu', pattern = paste0('04-', gr, '-*'))
simuDF = read.table(file.path('RandomSimu', simuFn), header = T, sep = '\t')
m.mean = mean(simuDF$modularity)
n.mean = mean(simuDF$nestedness)
RM = round((M.empir - m.mean)/m.mean, digits = 4)
RN = round((N.empir - n.mean)/n.mean, digits = 4)
Group = append(Group, rep(gr, 2))
values.r = append(values.r, c(RM, RN))
Type = append(Type, c('RM', 'RN'))
values.e = append(values.e, c(M.empir, N.empir))
empir = append(empir, c('Modularity', 'Nestedness'))
}
DFsum = data.frame(Group, values.r, Type, values.e, empir)
write.table(DFsum, '10-RmRnSummary.txt', append = F, quote = F, sep = '\t', row.names = F, col.names = T)
DFsum$GP = substr(DFsum$Group, 4, 4)
DFsum$Time = as.integer(substr(DFsum$Group, 2, 3))
DFsum.m = DFsum[DFsum$Group == 'D00C', ]
DFsum.m$Group = 'D00M'
DFsum.m$GP = 'M'
DFsum = rbind(DFsum, DFsum.m)
p = ggplot(DFsum, aes(x = Time, y = values.r, group = GP, color = GP)) +
geom_line(linetype = "solid",  size = 0.3, alpha = 0.3) +
geom_point(shape = 16,  size = 1, alpha = 0.75) +
geom_smooth(method = "lm", se = F, size = 0.5, alpha = 0.75) +
scale_color_manual(values = c('#E69F00', '#0072B2')) +
facet_wrap(.~Type, ncol = 2, scales = 'free_y') +
labs(x = "", y = "") + theme_bw()+
theme(panel.grid = element_blank(),
strip.text = element_text(size = 10),
strip.background = element_blank(),
axis.text.y = element_text(size = 8, hjust = 0.5, vjust = 0, angle = 90),
axis.text.x = element_text(size = 10, color = 'black'),
legend.position = "none")
ggsave("11-plot_RmRn.pdf", p, units = "in", height = 2.5, width = 3)
ggsave("11-plot_RmRn.pdf", p, units = "in", height = 2.5, width = 5)
write(c(), '12-RmRn_lmSmooth.txt')
for (gp in unique(DFsum$GP)) {
DFsum.f = DFsum[DFsum$GP == gp, ]
for (fac in unique(DFsum.f$Type)) {
DFsum.lm = DFsum.f[DFsum.f$Type == fac, ]
res = summary(lm(DFsum.lm$values.r ~ DFsum.lm$Time))
write('----------------------', '11-RmRn_lmSmooth.txt', append = T)
write(paste0('Group: ', gp), '11-RmRn_lmSmooth.txt', append = T)
write(paste0('Factor: ', fac), '11-RmRn_lmSmooth.txt', append = T)
write(paste0('slope: ', res$coefficients[,'Estimate'][1]), '11-RmRn_lmSmooth.txt', append = T)
write(paste0('r.squared: ', res$r.squared), '11-RmRn_lmSmooth.txt', append = T)
write(paste0('p_value: ', res$coefficients[,'Pr(>|t|)'][2]), '11-RmRn_lmSmooth.txt', append = T)
}
}
# coding: utf-8
# email: qfsfdxlqy@163.com
# Github: https://github.com/2015qyliang
library(igraph)
library(omnivor)
library(ggplot2)
library(tidyverse)
library(gridExtra)
####################################################################################################
mnIndex = function(fn) {
nodes = read.table(paste0('./NetInfo/', fn,' node_attribute.txt'),
header = T, sep = '\t', stringsAsFactors = F)
rownames(nodes) = nodes$id
links = read.table(paste0('./NetInfo/', fn,' edge_attribute.txt'),
header = T, sep = '\t', stringsAsFactors = F)
net.graph = graph_from_data_frame( d = links, vertices = nodes, directed = F)
modu = modularity(net.graph, membership = nodes$No..module)
nest = nestedness(net.graph, transpose = F)
return(c(modu, nest))
}
##########################################################
sampleGroups = read.table('01-RMTvalue.txt', header = T, sep = '\t', stringsAsFactors = F)
Group = values.r = values.e = Type = empir = c()
for (i in 1:length(sampleGroups$groups)) {
gr = sampleGroups$groups[i]
fn = paste0(gr, ' ', sprintf('%0.2f', sampleGroups$value[i]))
M.empir = mnIndex(fn)[1]
N.empir = mnIndex(fn)[2]
simuFn = list.files(path = 'RandomSimu', pattern = paste0('04-', gr, '-*'))
simuDF = read.table(file.path('RandomSimu', simuFn), header = T, sep = '\t')
m.mean = mean(simuDF$modularity)
n.mean = mean(simuDF$nestedness)
RM = round((M.empir - m.mean)/m.mean, digits = 4)
RN = round((N.empir - n.mean)/n.mean, digits = 4)
Group = append(Group, rep(gr, 2))
values.r = append(values.r, c(RM, RN))
Type = append(Type, c('RM', 'RN'))
values.e = append(values.e, c(M.empir, N.empir))
empir = append(empir, c('Modularity', 'Nestedness'))
}
DFsum = data.frame(Group, values.r, Type, values.e, empir)
write.table(DFsum, '10-RmRnSummary.txt', append = F, quote = F, sep = '\t', row.names = F, col.names = T)
DFsum$GP = substr(DFsum$Group, 4, 4)
DFsum$Time = as.integer(substr(DFsum$Group, 2, 3))
DFsum.m = DFsum[DFsum$Group == 'D00C', ]
DFsum.m$Group = 'D00M'
DFsum.m$GP = 'M'
DFsum = rbind(DFsum, DFsum.m)
##########################################################
p = ggplot(DFsum, aes(x = Time, y = values.r, group = GP, color = GP)) +
geom_line(linetype = "solid",  size = 0.3, alpha = 0.3) +
geom_point(shape = 16,  size = 1, alpha = 0.75) +
geom_smooth(method = "lm", se = F, size = 0.5, alpha = 0.75) +
scale_color_manual(values = c('#E69F00', '#0072B2')) +
facet_wrap(.~Type, ncol = 2, scales = 'free_y') +
labs(x = "", y = "") + theme_bw()+
theme(panel.grid = element_blank(),
strip.text = element_text(size = 10),
strip.background = element_blank(),
axis.text.y = element_text(size = 8, hjust = 0.5, vjust = 0, angle = 90),
axis.text.x = element_text(size = 10, color = 'black'),
legend.position = "none")
ggsave("11-plot_RmRn.pdf", p, units = "in", height = 2.5, width = 5)
##############
write(c(), '12-RmRn_lmSmooth.txt')
for (gp in unique(DFsum$GP)) {
DFsum.f = DFsum[DFsum$GP == gp, ]
for (fac in unique(DFsum.f$Type)) {
DFsum.lm = DFsum.f[DFsum.f$Type == fac, ]
res = summary(lm(DFsum.lm$values.r ~ DFsum.lm$Time))
write('----------------------', '11-RmRn_lmSmooth.txt', append = T)
write(paste0('Group: ', gp), '11-RmRn_lmSmooth.txt', append = T)
write(paste0('Factor: ', fac), '11-RmRn_lmSmooth.txt', append = T)
write(paste0('slope: ', res$coefficients[,'Estimate'][1]), '11-RmRn_lmSmooth.txt', append = T)
write(paste0('r.squared: ', res$r.squared), '11-RmRn_lmSmooth.txt', append = T)
write(paste0('p_value: ', res$coefficients[,'Pr(>|t|)'][2]), '11-RmRn_lmSmooth.txt', append = T)
}
}
##########################################################
##########################################################
##########################################################
##########################################################
corplot = function(idex) {
colwh = str_detect(colnames(df), 'C')
df.c = t(df[idex, colwh])
colnames(df.c) = c('v1', 'v2')
colwh = str_detect(colnames(df), 'M')
df.m = t(df[idex, colwh])
colnames(df.m) = c('v1', 'v2')
tmpdf = as.data.frame(rbind(df.c, df.m))
tmpdf$GP = substr(rownames(tmpdf), 4, 4)
p = ggplot(tmpdf, aes(x = v2, y = v1, group = GP, color = GP)) +
# geom_line(linetype = "solid",  size = 0.3, alpha = 0.3) +
geom_point(shape = 16,  size = 1, alpha = 0.75) +
geom_smooth(method = "lm", se = F, size = 0.5, alpha = 0.75) +
scale_color_manual(values = c('#E69F00', '#0072B2')) +
labs(x = idex[2], y = '') + theme_bw()+
theme(panel.grid = element_blank(),
axis.title = element_text(size = 8, color = 'black'),
axis.text.y = element_text(size = 6, hjust = 0.5, vjust = 0, angle = 90),
axis.text.x = element_text(size = 6, color = 'black'),
legend.position = "none")
return(p)
}
##########################################
corSmothLm = function(idex) {
colwh = str_detect(colnames(df), 'C')
df.c = as.data.frame(t(df[idex, colwh]))
colnames(df.c) = c('v1', 'v2')
colwh = str_detect(colnames(df), 'M')
df.m = as.data.frame(t(df[idex, colwh]))
colnames(df.m) = c('v1', 'v2')
res = cor.test(df.c$v1, df.c$v2)
lnhead = paste0(' --> Control -- ', idex[1], ' -vs- ', idex[2], '\n')
ln.r = paste0('pearson cor: ', res$estimate, '\n')
ln.p = paste0('p_value: ', res$p.value, '\n')
ln1 = paste0(lnhead,  ln.r, ln.p)
res = cor.test(df.m$v1, df.m$v2)
lnhead = paste0(' --> Treatment -- ', idex[1], ' -vs- ', idex[2], '\n')
ln.r = paste0('pearson cor: ', res$estimate, '\n')
ln.p = paste0('p_value: ', res$p.value, '\n')
ln2 = paste0(lnhead,  ln.r, ln.p)
return(paste0(ln1, ln2))
}
##########################################
df  = read.table('01-rmrnComplex.txt', header = T, sep = '\t',
stringsAsFactors = F, row.names = 1)
rownames(df)
lt.pairs = list(m1 = c('RM', 'Nodes'),
m2 = c('RM', 'Links'),
m3 = c('RM', 'avgK'),
m4 = c('RM', 'avgCC'),
m5 = c('RM', 'Modularity'),
m6 = c('RM', 'GD'),
n1 = c('RN', 'Nodes'),
n2 = c('RN', 'Links'),
n3 = c('RN', 'avgK'),
n4 = c('RN', 'avgCC'),
n5 = c('RN', 'Modularity'),
n6 = c('RN', 'GD') )
##############
write(c(), '14-Rm_cor.txt')
ps = list()
for (i in 1:6) {
ps[[i]] = corplot(lt.pairs[[i]])
write(corSmothLm(lt.pairs[[i]]), '14-Rm_cor.txt', append = T)
}
pall = grid.arrange(ps[[1]], ps[[2]], ps[[3]], ps[[4]],
ps[[5]], ps[[6]], nrow = 1)
ggsave("13-plot_Rm_vs_complex.pdf", pall, units = "in", height = 1.55, width = 8)
##############
write(c(), '14-Rn_cor.txt')
ps = list()
for (i in 1:6) {
ps[[i]] = corplot(lt.pairs[[i+6]])
write(corSmothLm(lt.pairs[[i+6]]), '14-Rn_cor.txt', append = T)
}
#####################################################################
pall = grid.arrange(ps[[1]], ps[[2]], ps[[3]], ps[[4]],
ps[[5]], ps[[6]], nrow = 1)
ggsave("13-plot_Rn_vs_complex.pdf", pall, units = "in", height = 1.55, width = 8)
